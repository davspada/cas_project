services:
  postgis:
    image: postgis/postgis
    environment:
      POSTGRES_USER: postgis
      POSTGRES_PASSWORD: password
      POSTGRES_DB: mydb
    ports:
      - "5432:5432"
    volumes:
      - postgis_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgis -d mydb"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:latest
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_KRAFT_MODE: "true"
      KAFKA_PROCESS_ROLES: controller,broker
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      CLUSTER_ID: "Mk3OEYBSD34fcwNTJENDM2Qk"
    volumes:
      - ./create-topics.sh:/usr/bin/create-topics.sh
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 20s
    entrypoint: ["/bin/bash", "-c", "/etc/confluent/docker/run & /usr/bin/create-topics.sh && wait"]
  
  # kafdrop:
  #   image: obsidiandynamics/kafdrop:latest
  #   depends_on:
  #     - kafka
  #   ports:
  #     - "9000:9000"
  #   environment:
  #     KAFKA_BROKERCONNECT: kafka:9092
  #     JVM_OPTS: "-Xms32M -Xmx64M"
  #   command: ["--server.port=9000"]

  backend:
    build:
      context: .
      dockerfile: dockerfile
    depends_on:
      postgis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      POSTGRES_USER: postgis
      POSTGRES_PASSWORD: password
      POSTGRES_DB: mydb
      POSTGRES_HOST: postgis
      KAFKA_BROKER: kafka:9092
    ports:
      - "8080:8080"
      - "8081:8081"
  # frontend:
  #   image: prod-cas-frontend1
  #   build:
  #     context: ../frontend/
  #     dockerfile: Dockerfile
  #   ports:
  #     - "3000:3000"

volumes:
  postgis_data:
  kafka_data: